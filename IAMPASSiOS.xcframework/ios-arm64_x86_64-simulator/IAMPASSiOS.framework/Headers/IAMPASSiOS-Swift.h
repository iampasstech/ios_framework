#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef IAMPASSIOS_SWIFT_H
#define IAMPASSIOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreBluetooth;
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IAMPASSiOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@protocol IPAcceptanceViewControllerDelegate;
@class NSCoder;
@class UIButton;
@class NSString;
@class NSBundle;

/// View controller for the the acceptance part of the authentication process.
/// The IAMPASS Framework includes a default UI for this authentication stage.
/// IPAcceptanceViewControllers are created by <code>IPAuthenticationViewController</code>.
/// A custom UI can be provided by creating a nib file containing an <code>IPAcceptanceViewController</code> and set the values of <code>IPAuthenticationViewController.acceptanceBundleIdentifier</code> and <code>IPAuthenticationViewController.acceptanceNibName</code>.
SWIFT_CLASS("_TtC10IAMPASSiOS26IPAcceptanceViewController")
@interface IPAcceptanceViewController : UIViewController
/// The delegate that receives the accept, reject response.
@property (nonatomic, strong) IBOutlet id <IPAcceptanceViewControllerDelegate> _Null_unspecified acceptanceDelegate;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The button that is used to accept the authentication request
/// Do not add a tap handler for the button.
/// If you implement a custom UI for the acceptance authentication stage you should connect the Yes/OK button to this member in InterfaceBuilder.
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified acceptButton;
/// The button that is used to reject the authentication request
/// Do not add a tap handler for the button.
/// If you implement a custom UI for the acceptance authentication stage you should connect the No/Cancel button to this member in InterfaceBuilder.
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified rejectButton;
/// :nodoc:
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Protocol for the acceptance view controller.
SWIFT_PROTOCOL("_TtP10IAMPASSiOS34IPAcceptanceViewControllerDelegate_")
@protocol IPAcceptanceViewControllerDelegate
/// Called when the user accepts the request..
- (void)didAcceptRequest;
/// Called when the user rejects the request.
- (void)didRejectRequest;
@end


/// Protocol for the proximity view controller
SWIFT_PROTOCOL("_TtP10IAMPASSiOS33IPProximityViewControllerDelegate_")
@protocol IPProximityViewControllerDelegate
/// Called when proximity has been detected.
/// \param code The detected proximity code
///
/// \param rssi The signal strength
///
/// \param desktop Identifier of the detected device.
///
- (void)didDetectProximityWithCode:(NSString * _Nonnull)code rssi:(NSInteger)rssi desktop:(NSString * _Nonnull)desktop;
/// Operation was cancelled
- (void)didCancelProximityDetection;
/// Operation failed
- (void)didFailDetectProximityWithError:(NSError * _Nullable)error;
@end


/// Protocol for the facial view controller
SWIFT_PROTOCOL("_TtP10IAMPASSiOS30IPFacialViewControllerDelegate_")
@protocol IPFacialViewControllerDelegate
/// Called when ACFacialViewController has collected the required number of faces
/// \param faces Array of collected images
///
- (void)didDetectFacesWithFaces:(NSArray<NSString *> * _Nonnull)faces;
/// Called when the facial detection process is cancelled.
- (void)didCancelFaceDetection;
/// Called when the facial detection process fails
/// <ul>
///   <li>
///     Parameters :
///     <ul>
///       <li>
///         error: The failure reason.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didFailDetectFacesWithError:(NSError * _Nullable)error;
@end


/// View controller that controls the authentication process.
/// The IAMPASS framework provides a default UI for all stages of the.
/// Applications can provide their own UI but must use this class to control the authentication process.
/// Customization is achieved by providing Bundle and Nib informtion for each of the screens.
/// The custom views must be instances or specializations of IAMPASS view controller classes
SWIFT_CLASS("_TtC10IAMPASSiOS30IPAuthenticationViewController")
@interface IPAuthenticationViewController : UIViewController <IPAcceptanceViewControllerDelegate, IPFacialViewControllerDelegate, IPProximityViewControllerDelegate>
/// The id of a the bundle that contains a custom <code>IPAcceptanceViewController</code>.
/// Client applications can set this value to display a custom UI for the acceptance stage.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull acceptanceBundleIdentifier;
/// The name of the nib that contains a custom <code>IPAcceptanceViewController</code>.
/// Client applications can set this value to display a custom UI for the acceptance stage.
/// The specified nib should contain a ViewController with the Custom Class property set to IPAcceptanceViewController in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull acceptanceNibName;
/// The id of a the bundle that contains a custom IPOSViewController.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull osBundleIdentifier;
/// The name of the nib that contains a custom <code>IPOSViewController</code>.
/// Client applications can set this value to display a custom UI for the os authentication stage.
/// The specified nib should contain a ViewController with the Custom Class property set to IPOSViewController in Ithe Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull osNibName;
/// The id of a the bundle that contains a custom <code>IPFacialViewController</code>.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull facialBundleIdentifier;
/// The name of the nib that contains a custom <code>IPFacialViewController</code>.
/// Client applications can set this value to display a custom UI for the facial stage.
/// The specified nib should contain a ViewController with the Custom Class property set to IPFacialViewController in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull facialNibName;
/// The id of a the bundle that contains a custom <code>ACProximityViewController</code>.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull proximityBundleIdentifier;
/// The name of the nib that contains a custom <code>IPProximityViewController</code>.
/// Client applications can set this value to display a custom UI for the proximity stage.
/// The specified nib should contain a ViewController with the Custom Class property set to IPProximityViewController inthe Interface Builder Identity Inspectorr.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull proximityNibName;
/// The id of a the bundle that contains a custom <code>IPStatusViewController</code>.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull statusBundleIdentifier;
/// The name of the nib that contains a custom <code>IPStatusViewController</code>.
/// Client applications can set this value to display a custom UI for the status messages.
/// The specified nib should contain a ViewController with the Custom Class property set to IPStatus in Interface Builder.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull statusNibName;
/// The id of a the bundle that contains a custom <code>IPBusyViewController</code>.
/// The specified nib should contain a ViewController with the Custom Class property set to IPBusyViewController in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull authenticatingBundleIdentifier;
/// The name of the nib that contains a custom <code>IPBusyViewController</code>.
/// Client applications can set this value to display a custom UI when the app is communicating with IAMPASS
/// The specified nib should contain a ViewController with the Custom Class property set to IPBusyViewController in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull authenticatingNibName;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)didAcceptRequest;
/// :nodoc:
- (void)didRejectRequest;
/// :nodoc:
- (void)didDetectFacesWithFaces:(NSArray<NSString *> * _Nonnull)faces;
/// :nodoc:
- (void)didCancelFaceDetection;
/// :nodoc:
- (void)didFailDetectFacesWithError:(NSError * _Nullable)error;
/// :nodoc:
- (void)didDetectProximityWithCode:(NSString * _Nonnull)code rssi:(NSInteger)rssi desktop:(NSString * _Nonnull)desktop;
/// :nodoc:
- (void)didCancelProximityDetection;
/// :nodoc:
- (void)didFailDetectProximityWithError:(NSError * _Nullable)error;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Class used to display a ‘busy’ screen, which is displayed when the application is performing a lengthy task.
/// Client applications can use this class to create a custom busy UI.
/// Create a new view controller in Interface Builder, then set the Custom Class property to IPBusyViewController in the Identity Inspoector.
/// The bundle identifier and nib containing the view can then be used with <code>IPAuthenticationViewController.authenticatingBundleIdentifier </code>  and <code>IPAuthenticationViewController.authenticatingNibName</code>
/// to display the view.
SWIFT_CLASS("_TtC10IAMPASSiOS20IPBusyViewController")
@interface IPBusyViewController : UIViewController
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// :nodoc:
SWIFT_CLASS("_TtC10IAMPASSiOS27IPCaptureFaceViewController")
@interface IPCaptureFaceViewController : UIViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class AVCaptureOutput;
@class AVCaptureConnection;

@interface IPCaptureFaceViewController (SWIFT_EXTENSION(IAMPASSiOS)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end

@protocol UIViewControllerTransitionCoordinator;

@interface IPCaptureFaceViewController (SWIFT_EXTENSION(IAMPASSiOS))
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end


/// A view controller that collects images of the user’s face.
SWIFT_CLASS("_TtC10IAMPASSiOS22IPFacialViewController")
@interface IPFacialViewController : IPCaptureFaceViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (IBAction)onCancel:(id _Nonnull)sender;
/// :nodoc:
- (void)didReceiveMemoryWarning;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// View controller for performing OS authentication.
/// ACOSViewControllers are created by <code>IPAuthenticationViewController</code>.
/// A custom UI can be provided by creating a nib file containing an <code>IPOSViewController</code> and set the values of <code>IPAuthenticationViewController.osBundleIdentifier</code> and <code>IPAuthenticationViewController.osNibName</code>.
SWIFT_CLASS("_TtC10IAMPASSiOS18IPOSViewController")
@interface IPOSViewController : UIViewController
/// The message to display on the unlock sreen.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull unlockMessage;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// View controller used to detect proximity when it is required by an Authentication Request.
/// A custom UI can be provided by creating a nib file containing an <code>IPProximityViewController</code> and set the values of <code>IPAuthenticationViewController.proximityBundleIdentifier</code> and <code>IPAuthenticationViewController.proximityNibName</code>.
SWIFT_CLASS("_TtC10IAMPASSiOS25IPProximityViewController")
@interface IPProximityViewController : UIViewController
/// The delegate that receives face detection events
@property (nonatomic, strong) IBInspectable id <IPProximityViewControllerDelegate> _Nullable proximityDelegate;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// View controller that informs the user that training is required.
/// IAMPASS includes a default UI for this view controller.
/// A custom UI can be provided by creating a nib file containing an IPTrainingRequiredViewController  and set the values of <code>IPTrainingViewController.instructionsBundleIdentifier</code> and <code>IPTrainingViewController.instructionsNibName</code>.
SWIFT_CLASS("_TtC10IAMPASSiOS32IPTrainingRequiredViewController")
@interface IPTrainingRequiredViewController : UIViewController
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)viewDidLoad;
/// Handler for the starting training.
/// Applications that provide a custom UI should connect their start button to this handler.
- (IBAction)onStart:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// View controller used for the training process.
/// The view controller has several views which are displayed depending upon the training that needs to be performed.
/// In addition the following views are controller:
/// <ul>
///   <li>
///     Instructions view is displayed prior to training and a status view which displays the result
///   </li>
///   <li>
///     Busy view is displayed while training data is being processed.
///   </li>
///   <li>
///     Status view is displayed to report the result of the training process.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10IAMPASSiOS24IPTrainingViewController")
@interface IPTrainingViewController : UIViewController
/// Identifier of the bundle that contains custom facial training UI (ACFacialViewController).
@property (nonatomic, copy) IBInspectable NSString * _Nonnull facialBundleIdentifier;
/// The name of the nib file that contains the custom facial training UI (ACfacialViewController)
/// The specified nib should contain a ViewController with the Custom Class property set to <code>ACFacialViewController</code> in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull facialNibName;
/// Identifier of the bundle that contains custom instructions UI (ACTrainingRequiredViewController).
@property (nonatomic, copy) IBInspectable NSString * _Nonnull instructionsBundleIdentifier;
/// The name of the nib file that contains the custom instructions UI (ACTrainingRequiredViewController)
/// The specified nib should contain a ViewController with the Custom Class property set to <code>ACTrainingRequiredViewController</code> in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull instructionsNibName;
/// Identifier of the bundle that contains custom status UI (ACStatusViewController).
@property (nonatomic, copy) IBInspectable NSString * _Nonnull statusBundleIdentifier;
/// The name of the nib file that contains the custom status UI (ACStatusViewController)
/// The specified nib should contain a ViewController with the Custom Class property set to <code>ACStatusViewController</code> in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull statusNibName;
/// Identifier of the bundle that contains custom busy UI (ACBusyViewController).
@property (nonatomic, copy) IBInspectable NSString * _Nonnull busyBundleIdentifier;
/// The name of the nib file that contains the custom busy UI (ACBusyViewController)
/// The specified nib should contain a ViewController with the Custom Class property set to <code>ACBusyViewController</code> in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull busyNibName;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IPTrainingViewController (SWIFT_EXTENSION(IAMPASSiOS)) <IPFacialViewControllerDelegate>
/// :nodoc:
- (void)didDetectFacesWithFaces:(NSArray<NSString *> * _Nonnull)faces;
/// :nodoc:
- (void)didCancelFaceDetection;
/// :nodoc:
- (void)didFailDetectFacesWithError:(NSError * _Nullable)error;
@end


/// Class the represents an IAMPASS User.
/// Instances of this class contain the information required to communicate with IAMPASS on behalf the of the device user.
/// The client applicaton is responsible for storing the IPUser data for the user accounts registered with their app.
/// IPUser data can be serialized as JSON and store/read from a secure location, for example the device key chain.
SWIFT_CLASS("_TtC10IAMPASSiOS6IPUser")
@interface IPUser : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBPeripheralManager;
@class CBATTRequest;

/// :nodoc:
SWIFT_CLASS("_TtC10IAMPASSiOS17ProximityDetector")
@interface ProximityDetector : NSObject <CBPeripheralManagerDelegate>
- (void)peripheralManagerDidUpdateState:(CBPeripheralManager * _Nonnull)peripheral;
- (void)peripheralManager:(CBPeripheralManager * _Nonnull)peripheral didReceiveWriteRequests:(NSArray<CBATTRequest *> * _Nonnull)requests;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef IAMPASSIOS_SWIFT_H
#define IAMPASSIOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreBluetooth;
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IAMPASSiOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@protocol IPAcceptanceViewControllerDelegate;
@class NSCoder;
@class UIButton;
@class NSString;
@class NSBundle;

/// View controller for the the acceptance part of the authentication process.
/// The IAMPASS Framework includes a default UI for this authentication stage.
/// IPAcceptanceViewControllers are created by <code>IPAuthenticationViewController</code>.
/// A custom UI can be provided by creating a nib file containing an <code>IPAcceptanceViewController</code> and set the values of <code>IPAuthenticationViewController.acceptanceBundleIdentifier</code> and <code>IPAuthenticationViewController.acceptanceNibName</code>.
SWIFT_CLASS("_TtC10IAMPASSiOS26IPAcceptanceViewController")
@interface IPAcceptanceViewController : UIViewController
/// The delegate that receives the accept, reject response.
@property (nonatomic, strong) IBOutlet id <IPAcceptanceViewControllerDelegate> _Null_unspecified acceptanceDelegate;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The button that is used to accept the authentication request
/// Do not add a tap handler for the button.
/// If you implement a custom UI for the acceptance authentication stage you should connect the Yes/OK button to this member in InterfaceBuilder.
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified acceptButton;
/// The button that is used to reject the authentication request
/// Do not add a tap handler for the button.
/// If you implement a custom UI for the acceptance authentication stage you should connect the No/Cancel button to this member in InterfaceBuilder.
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified rejectButton;
/// :nodoc:
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Protocol for the acceptance view controller.
SWIFT_PROTOCOL("_TtP10IAMPASSiOS34IPAcceptanceViewControllerDelegate_")
@protocol IPAcceptanceViewControllerDelegate
/// Called when the user accepts the request..
- (void)didAcceptRequest;
/// Called when the user rejects the request.
- (void)didRejectRequest;
@end


/// Protocol for the proximity view controller
SWIFT_PROTOCOL("_TtP10IAMPASSiOS33IPProximityViewControllerDelegate_")
@protocol IPProximityViewControllerDelegate
/// Called when proximity has been detected.
/// \param code The detected proximity code
///
/// \param rssi The signal strength
///
/// \param desktop Identifier of the detected device.
///
- (void)didDetectProximityWithCode:(NSString * _Nonnull)code rssi:(NSInteger)rssi desktop:(NSString * _Nonnull)desktop;
/// Operation was cancelled
- (void)didCancelProximityDetection;
/// Operation failed
- (void)didFailDetectProximityWithError:(NSError * _Nullable)error;
@end


/// Protocol for the facial view controller
SWIFT_PROTOCOL("_TtP10IAMPASSiOS30IPFacialViewControllerDelegate_")
@protocol IPFacialViewControllerDelegate
/// Called when ACFacialViewController has collected the required number of faces
/// \param faces Array of collected images
///
- (void)didDetectFacesWithFaces:(NSArray<NSString *> * _Nonnull)faces;
/// Called when the facial detection process is cancelled.
- (void)didCancelFaceDetection;
/// Called when the facial detection process fails
/// <ul>
///   <li>
///     Parameters :
///     <ul>
///       <li>
///         error: The failure reason.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didFailDetectFacesWithError:(NSError * _Nullable)error;
@end


/// View controller that controls the authentication process.
/// The IAMPASS framework provides a default UI for all stages of the.
/// Applications can provide their own UI but must use this class to control the authentication process.
/// Customization is achieved by providing Bundle and Nib informtion for each of the screens.
/// The custom views must be instances or specializations of IAMPASS view controller classes
SWIFT_CLASS("_TtC10IAMPASSiOS30IPAuthenticationViewController")
@interface IPAuthenticationViewController : UIViewController <IPAcceptanceViewControllerDelegate, IPFacialViewControllerDelegate, IPProximityViewControllerDelegate>
/// The id of a the bundle that contains a custom <code>IPAcceptanceViewController</code>.
/// Client applications can set this value to display a custom UI for the acceptance stage.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull acceptanceBundleIdentifier;
/// The name of the nib that contains a custom <code>IPAcceptanceViewController</code>.
/// Client applications can set this value to display a custom UI for the acceptance stage.
/// The specified nib should contain a ViewController with the Custom Class property set to IPAcceptanceViewController in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull acceptanceNibName;
/// The id of a the bundle that contains a custom IPOSViewController.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull osBundleIdentifier;
/// The name of the nib that contains a custom <code>IPOSViewController</code>.
/// Client applications can set this value to display a custom UI for the os authentication stage.
/// The specified nib should contain a ViewController with the Custom Class property set to IPOSViewController in Ithe Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull osNibName;
/// The id of a the bundle that contains a custom <code>IPFacialViewController</code>.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull facialBundleIdentifier;
/// The name of the nib that contains a custom <code>IPFacialViewController</code>.
/// Client applications can set this value to display a custom UI for the facial stage.
/// The specified nib should contain a ViewController with the Custom Class property set to IPFacialViewController in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull facialNibName;
/// The id of a the bundle that contains a custom <code>ACProximityViewController</code>.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull proximityBundleIdentifier;
/// The name of the nib that contains a custom <code>IPProximityViewController</code>.
/// Client applications can set this value to display a custom UI for the proximity stage.
/// The specified nib should contain a ViewController with the Custom Class property set to IPProximityViewController inthe Interface Builder Identity Inspectorr.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull proximityNibName;
/// The id of a the bundle that contains a custom <code>IPStatusViewController</code>.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull statusBundleIdentifier;
/// The name of the nib that contains a custom <code>IPStatusViewController</code>.
/// Client applications can set this value to display a custom UI for the status messages.
/// The specified nib should contain a ViewController with the Custom Class property set to IPStatus in Interface Builder.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull statusNibName;
/// The id of a the bundle that contains a custom <code>IPBusyViewController</code>.
/// The specified nib should contain a ViewController with the Custom Class property set to IPBusyViewController in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull authenticatingBundleIdentifier;
/// The name of the nib that contains a custom <code>IPBusyViewController</code>.
/// Client applications can set this value to display a custom UI when the app is communicating with IAMPASS
/// The specified nib should contain a ViewController with the Custom Class property set to IPBusyViewController in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull authenticatingNibName;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)didAcceptRequest;
/// :nodoc:
- (void)didRejectRequest;
/// :nodoc:
- (void)didDetectFacesWithFaces:(NSArray<NSString *> * _Nonnull)faces;
/// :nodoc:
- (void)didCancelFaceDetection;
/// :nodoc:
- (void)didFailDetectFacesWithError:(NSError * _Nullable)error;
/// :nodoc:
- (void)didDetectProximityWithCode:(NSString * _Nonnull)code rssi:(NSInteger)rssi desktop:(NSString * _Nonnull)desktop;
/// :nodoc:
- (void)didCancelProximityDetection;
/// :nodoc:
- (void)didFailDetectProximityWithError:(NSError * _Nullable)error;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Class used to display a ‘busy’ screen, which is displayed when the application is performing a lengthy task.
/// Client applications can use this class to create a custom busy UI.
/// Create a new view controller in Interface Builder, then set the Custom Class property to IPBusyViewController in the Identity Inspoector.
/// The bundle identifier and nib containing the view can then be used with <code>IPAuthenticationViewController.authenticatingBundleIdentifier </code>  and <code>IPAuthenticationViewController.authenticatingNibName</code>
/// to display the view.
SWIFT_CLASS("_TtC10IAMPASSiOS20IPBusyViewController")
@interface IPBusyViewController : UIViewController
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// :nodoc:
SWIFT_CLASS("_TtC10IAMPASSiOS27IPCaptureFaceViewController")
@interface IPCaptureFaceViewController : UIViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class AVCaptureOutput;
@class AVCaptureConnection;

@interface IPCaptureFaceViewController (SWIFT_EXTENSION(IAMPASSiOS)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end

@protocol UIViewControllerTransitionCoordinator;

@interface IPCaptureFaceViewController (SWIFT_EXTENSION(IAMPASSiOS))
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end


/// A view controller that collects images of the user’s face.
SWIFT_CLASS("_TtC10IAMPASSiOS22IPFacialViewController")
@interface IPFacialViewController : IPCaptureFaceViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (IBAction)onCancel:(id _Nonnull)sender;
/// :nodoc:
- (void)didReceiveMemoryWarning;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// View controller for performing OS authentication.
/// ACOSViewControllers are created by <code>IPAuthenticationViewController</code>.
/// A custom UI can be provided by creating a nib file containing an <code>IPOSViewController</code> and set the values of <code>IPAuthenticationViewController.osBundleIdentifier</code> and <code>IPAuthenticationViewController.osNibName</code>.
SWIFT_CLASS("_TtC10IAMPASSiOS18IPOSViewController")
@interface IPOSViewController : UIViewController
/// The message to display on the unlock sreen.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull unlockMessage;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// View controller used to detect proximity when it is required by an Authentication Request.
/// A custom UI can be provided by creating a nib file containing an <code>IPProximityViewController</code> and set the values of <code>IPAuthenticationViewController.proximityBundleIdentifier</code> and <code>IPAuthenticationViewController.proximityNibName</code>.
SWIFT_CLASS("_TtC10IAMPASSiOS25IPProximityViewController")
@interface IPProximityViewController : UIViewController
/// The delegate that receives face detection events
@property (nonatomic, strong) IBInspectable id <IPProximityViewControllerDelegate> _Nullable proximityDelegate;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// View controller that informs the user that training is required.
/// IAMPASS includes a default UI for this view controller.
/// A custom UI can be provided by creating a nib file containing an IPTrainingRequiredViewController  and set the values of <code>IPTrainingViewController.instructionsBundleIdentifier</code> and <code>IPTrainingViewController.instructionsNibName</code>.
SWIFT_CLASS("_TtC10IAMPASSiOS32IPTrainingRequiredViewController")
@interface IPTrainingRequiredViewController : UIViewController
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)viewDidLoad;
/// Handler for the starting training.
/// Applications that provide a custom UI should connect their start button to this handler.
- (IBAction)onStart:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// View controller used for the training process.
/// The view controller has several views which are displayed depending upon the training that needs to be performed.
/// In addition the following views are controller:
/// <ul>
///   <li>
///     Instructions view is displayed prior to training and a status view which displays the result
///   </li>
///   <li>
///     Busy view is displayed while training data is being processed.
///   </li>
///   <li>
///     Status view is displayed to report the result of the training process.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10IAMPASSiOS24IPTrainingViewController")
@interface IPTrainingViewController : UIViewController
/// Identifier of the bundle that contains custom facial training UI (ACFacialViewController).
@property (nonatomic, copy) IBInspectable NSString * _Nonnull facialBundleIdentifier;
/// The name of the nib file that contains the custom facial training UI (ACfacialViewController)
/// The specified nib should contain a ViewController with the Custom Class property set to <code>ACFacialViewController</code> in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull facialNibName;
/// Identifier of the bundle that contains custom instructions UI (ACTrainingRequiredViewController).
@property (nonatomic, copy) IBInspectable NSString * _Nonnull instructionsBundleIdentifier;
/// The name of the nib file that contains the custom instructions UI (ACTrainingRequiredViewController)
/// The specified nib should contain a ViewController with the Custom Class property set to <code>ACTrainingRequiredViewController</code> in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull instructionsNibName;
/// Identifier of the bundle that contains custom status UI (ACStatusViewController).
@property (nonatomic, copy) IBInspectable NSString * _Nonnull statusBundleIdentifier;
/// The name of the nib file that contains the custom status UI (ACStatusViewController)
/// The specified nib should contain a ViewController with the Custom Class property set to <code>ACStatusViewController</code> in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull statusNibName;
/// Identifier of the bundle that contains custom busy UI (ACBusyViewController).
@property (nonatomic, copy) IBInspectable NSString * _Nonnull busyBundleIdentifier;
/// The name of the nib file that contains the custom busy UI (ACBusyViewController)
/// The specified nib should contain a ViewController with the Custom Class property set to <code>ACBusyViewController</code> in the Interface Builder Identity Inspector.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull busyNibName;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IPTrainingViewController (SWIFT_EXTENSION(IAMPASSiOS)) <IPFacialViewControllerDelegate>
/// :nodoc:
- (void)didDetectFacesWithFaces:(NSArray<NSString *> * _Nonnull)faces;
/// :nodoc:
- (void)didCancelFaceDetection;
/// :nodoc:
- (void)didFailDetectFacesWithError:(NSError * _Nullable)error;
@end


/// Class the represents an IAMPASS User.
/// Instances of this class contain the information required to communicate with IAMPASS on behalf the of the device user.
/// The client applicaton is responsible for storing the IPUser data for the user accounts registered with their app.
/// IPUser data can be serialized as JSON and store/read from a secure location, for example the device key chain.
SWIFT_CLASS("_TtC10IAMPASSiOS6IPUser")
@interface IPUser : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBPeripheralManager;
@class CBATTRequest;

/// :nodoc:
SWIFT_CLASS("_TtC10IAMPASSiOS17ProximityDetector")
@interface ProximityDetector : NSObject <CBPeripheralManagerDelegate>
- (void)peripheralManagerDidUpdateState:(CBPeripheralManager * _Nonnull)peripheral;
- (void)peripheralManager:(CBPeripheralManager * _Nonnull)peripheral didReceiveWriteRequests:(NSArray<CBATTRequest *> * _Nonnull)requests;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
